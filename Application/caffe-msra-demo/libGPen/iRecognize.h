#ifndef __IRECOGNIZE__
#define __IRECOGNIZE__

#ifdef __cplusplus
extern "C" {
#endif


//------------------------------------------------------------------------------------------------
//  函数名: recognize
//  功能描述：手写引擎，完成字的识别
//  参数说明：
//      输入：
//			candidates		:	按置信度由高到低的前十候选字的unicode编码
//			ptBuf	:	手写字符坐标点{x1,y1,x2,y2, …,-1,0,…,-1,0,…,-1,0,-1,-1}，每一笔画以（-1,0）结束，整体以（-1，-1）结束
//			ptNum	:	手写字符坐标点个数n，包括边界点(即包括笔画结束点和字结束点)
//			targetType	:	识别目标集
//			codeType	:	字符编码类型，0表示unicode码，1表示gbk码
//			fCanScr		:	置信度
//		输出：
//			无
//-------------------------------------------------------------------------------------------------
void recognize(char candidates[], int ptBuf[], int ptNum, int targetType, int codeType, float* fCanScr);


//------------------------------------------------------------------------------------------------
//  函数名: recognize_indoor
//  功能描述：手写引擎，完成字的识别，并且增加前十候选字在10081字表中的索引号和所属范围（重叠手写使用）
//  参数说明：
//      输入：
//			candidates		:	按置信度由高到低的前十候选字的unicode编码
//			ptBuf	:	手写字符坐标点{x1,y1,x2,y2, …,-1,0,…,-1,0,…,-1,0,-1,-1}，每一笔画以（-1,0）结束，整体以（-1，-1）结束
//			ptNum	:	手写字符坐标点个数n，包括边界点(即包括笔画结束点和字结束点)
//			targetType	:	识别目标集
//			codeType	:	字符编码类型，0表示unicode码，1表示gbk码
//			fCanScr		:	返回置信度
//			CandiIndex	:	按置信度由高到低的前十候选字的在10081字表中的索引号
//			CandiRangeNum	:	按置信度由高到低的前十候选字的在10081字表中的所属范围（例如：数字区，字母区，汉字区...）
//		输出：
//			无
//-------------------------------------------------------------------------------------------------*//
void recognizeOverLap(char candidates[],int ptBuf[],int ptNum,int targetType,int codeType, float* fCanScr, int* CandiIndex, int* CandiRangeNum);


//------------------------------------------------------------------------------------------------
//  函数名: loadClassifier
//  功能描述：分类器初始化
//  参数说明：
//      输入：
//			无
//		输出：
//			无
//-------------------------------------------------------------------------------------------------*//
void loadClassifier();


//------------------------------------------------------------------------------------------------
//  函数名: releaseClassifier
//  功能描述：释放分类器和内存
//  参数说明：
//      输入：
//			无
//		输出：
//			无
//-------------------------------------------------------------------------------------------------*//
void releaseClassifier();


//------------------------------------------------------------------------------------------------
//  函数名: loadclassifier
//  功能描述：兼容旧版引擎
//  参数说明：
//      输入：无
//		输出：无
//-------------------------------------------------------------------------------------------------
int loadclassifier();


//------------------------------------------------------------------------------------------------
//  函数名: setparam
//  功能描述：兼容旧版引擎
//  参数说明：
//      输入：无
//		输出：无
//-------------------------------------------------------------------------------------------------
int setparam(int);


//------------------------------------------------------------------------------------------------
//  函数名: setversion
//  功能描述：用于获得当前是简体字符集，繁体字符集还是混合体字符集
//  参数说明：
//      输入：指示当前字符集
//				#define TRADITIONAL_CHAR	1
//				#define SIMPLIFIED_CHAR		2
//				#define MIX_CHAR			3
//		输出：无
//-------------------------------------------------------------------------------------------------
int setversion(int);


//------------------------------------------------------------------------------------------------
//  函数名: getCandidateCount
//  功能描述：返回候选字有效个数
//  参数说明：
//      输入：无
//		输出：候选字有效个数
//-------------------------------------------------------------------------------------------------
int getCandidateCount();


//------------------------------------------------------------------------------------------------
//  函数名: indexBtoGUnicode
//  功能描述：将繁体转为简体，外部使用
//  参数说明：
//      输入：
//		bigIndex：10081中的索引
//		code：候选字unicode编码
//		输出：
//		更新候选字unicode编码：code
//		 返回新候选字在10081中的索引
//-------------------------------------------------------------------------------------------------
bool indexBtoGUnicode(int, char*);


#ifdef __cplusplus
}
#endif

#endif /* JC_API */

